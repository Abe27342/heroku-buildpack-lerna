#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Ensure wildcards in globs match dotfiles too.
shopt -s dotglob

BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"
STAGE="$(mktemp -d)"
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

source "$BP_DIR/lib/output.sh"
source "$BP_DIR/lib/environment.sh"

if [ ! -f "${ENV_DIR}/APP_BASE" ]; then
    echo "APP_BASE was not set. Aborting" | indent
    exit 1
fi
APP_BASE="$(cat "${ENV_DIR}/APP_BASE")"

export_env_dir "$ENV_DIR"
write_profile "$BP_DIR" "$BUILD_DIR"

header "Changing current dir to ${BUILD_DIR}"
cd "${BUILD_DIR}"

header "Installing dependencies (lerna bootstrap)"
lerna bootstrap --scope="${APP_BASE}" --include-dependencies 2>&1 | output

header "Building ${APP_BASE} and its dependencies"
lerna run build --scope="${APP_BASE}" --include-dependencies --stream 2>&1 | output

header "Going back to previous directory"
cd -

(
    mv "${BUILD_DIR}/${APP_BASE}" "${STAGE}" &&
    mv "${BUILD_DIR}/.heroku" "${STAGE}/.heroku"
    mv "${BUILD_DIR}/.profile.d" "${STAGE}/.profile.d"
    rm -rf "${BUILD_DIR}"/* &&
    mv "${STAGE}/$(basename "$APP_BASE")"/* "${BUILD_DIR}"
    mv "${STAGE}/.heroku" "${BUILD_DIR}/.heroku"
    mv "${STAGE}/.profile.d" "${BUILD_DIR}/.profile.d"
)

if [ $? -ne 0 ]; then
    echo "FAILED to copy directory into place" | indent
    exit 1
fi

echo "Copied ${APP_BASE} to root of app successfully" | indent
